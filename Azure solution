# Cost Optimization Challenge: Managing Billing Records in Azure Serverless Architecture

## üìò Problem Statement
We are using a serverless Azure-based architecture where billing records are stored in **Azure Cosmos DB**. It is a read-heavy system, but most read requests target data less than 3 months old. However, the database has grown significantly with over 2 million records, each up to 300 KB, increasing our overall cost.

### Constraints:
- No API changes
- No data loss
- No downtime
- Ease of deployment and maintenance

---

## ‚úÖ Objective
Reduce storage cost for rarely accessed (cold) billing records while maintaining accessibility and meeting all the above constraints.

---

## üí° Solution Overview: Tiered Storage Model
We will implement a **Hot-Cold Tiered Storage** strategy:

| Data Type | Storage | Access Pattern |
|-----------|---------|----------------|
| Recent (< 3 months) | Azure Cosmos DB | Frequent, fast access |
| Older (> 3 months) | Azure Blob Storage (Cool/Archive Tier) | Rare, fallback access |

---

## üß± Architecture Diagram

![Architecture Diagram](https://github.com/YOUR_USERNAME/YOUR_REPO_NAME/blob/main/architecture-diagram.png?raw=true)

> Replace `YOUR_USERNAME` and `YOUR_REPO_NAME` above with your GitHub username and repo name.

---

## ‚öôÔ∏è Components Involved

- Azure Cosmos DB
- Azure Blob Storage (Cool/Archive)
- Azure Functions
- API Layer (unchanged)

---

## üîÅ Data Flow Logic

1. **Ingestion**  
   Records go to Cosmos DB via existing APIs.

2. **Archival (Azure Function Timer Trigger)**  
   Identify records older than 3 months ‚Üí move to Blob ‚Üí delete from Cosmos DB.

3. **Read Access (Fallback)**  
   If Cosmos DB misses, fetch from Blob via Azure Function.

---

## üß† Pseudocode: Archival Function

```python
# ArchiveRecords.py
from azure.cosmos import CosmosClient
from azure.storage.blob import BlobServiceClient
import json, datetime

def archive_old_records():
    cutoff = datetime.datetime.utcnow() - datetime.timedelta(days=90)
    # Connect to Cosmos, get records older than cutoff, store to Blob, delete from Cosmos
